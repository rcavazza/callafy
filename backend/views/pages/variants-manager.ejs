<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestione Varianti Avanzata - Inventory Manager</title>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            color: #1a202c;
            line-height: 1.6;
        }
        
        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid #e2e8f0;
            padding: 1rem 2rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }
        .header h1 { 
            color: #2d3748; 
            font-size: 1.5rem; 
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .back-btn {
            background: #e2e8f0;
            color: #4a5568;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.875rem;
            transition: background 0.2s;
        }
        .back-btn:hover { background: #cbd5e0; }
        
        /* Container */
        .container { 
            max-width: 1400px; 
            margin: 0 auto; 
            padding: 2rem; 
        }
        
        /* Wizard Steps */
        .wizard-header {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        .wizard-steps {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .step {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
        }
        .step.active {
            background: #3182ce;
            color: white;
        }
        .step.completed {
            background: #38a169;
            color: white;
        }
        .step.pending {
            background: #e2e8f0;
            color: #4a5568;
        }
        .step-number {
            background: rgba(255,255,255,0.2);
            width: 1.5rem;
            height: 1.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 600;
        }
        .step.pending .step-number {
            background: #cbd5e0;
            color: #4a5568;
        }
        
        /* Step Content */
        .step-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        .step-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 1rem;
        }
        .step-description {
            color: #718096;
            margin-bottom: 2rem;
        }
        
        /* Form Elements */
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #2d3748;
            font-size: 0.875rem;
        }
        .form-input,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.875rem;
            transition: border-color 0.2s;
        }
        .form-input:focus,
        .form-select:focus {
            outline: none;
            border-color: #3182ce;
            box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
        }
        
        /* Buttons */
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        .btn-primary {
            background: #3182ce;
            color: white;
        }
        .btn-primary:hover {
            background: #2c5aa0;
        }
        .btn-outline {
            background: transparent;
            color: #3182ce;
            border: 1px solid #3182ce;
        }
        .btn-outline:hover {
            background: #3182ce;
            color: white;
        }
        .btn-success {
            background: #38a169;
            color: white;
        }
        .btn-success:hover {
            background: #2f855a;
        }
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Navigation */
        .step-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
        }
        
        /* Product Selection */
        .product-card {
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 1rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        .product-card:hover {
            border-color: #3182ce;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .product-card.selected {
            border-color: #3182ce;
            background: #f0f9ff;
        }
        .product-title {
            font-weight: 500;
            color: #2d3748;
            margin-bottom: 0.25rem;
        }
        .product-meta {
            font-size: 0.75rem;
            color: #718096;
        }
        
        /* Options Configuration */
        .option-item {
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 1rem;
            margin-bottom: 1rem;
        }
        .option-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .option-title {
            font-weight: 500;
            color: #2d3748;
        }
        .option-values {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        .option-value {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
        
        /* Variants Grid */
        .variants-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        .variant-card {
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 1rem;
        }
        .variant-header {
            font-weight: 500;
            color: #2d3748;
            margin-bottom: 0.5rem;
        }
        .variant-options {
            font-size: 0.75rem;
            color: #718096;
            margin-bottom: 1rem;
        }
        .variant-fields {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }
        .variant-field {
            display: flex;
            flex-direction: column;
        }
        .variant-field label {
            font-size: 0.75rem;
            color: #4a5568;
            margin-bottom: 0.25rem;
        }
        .variant-field input {
            padding: 0.5rem;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            font-size: 0.75rem;
        }
        
        /* Hidden by default */
        .step-content {
            display: none;
        }
        .step-content.active {
            display: block;
        }
        
        /* Notifications */
        .notification {
            position: fixed;
            top: 1rem;
            right: 1rem;
            padding: 1rem 1.5rem;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s;
        }
        .notification.show {
            transform: translateX(0);
        }
        .notification.success {
            background: #38a169;
        }
        .notification.error {
            background: #e53e3e;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>üîß Gestione Varianti Avanzata</h1>
            <a href="/products" class="back-btn">‚Üê Torna ai Prodotti</a>
        </div>
    </div>
    
    <!-- Container -->
    <div class="container">
        <!-- Wizard Header -->
        <div class="wizard-header">
            <div class="wizard-steps">
                <div class="step active" id="step1-indicator">
                    <div class="step-number">1</div>
                    <span>Seleziona Prodotto</span>
                </div>
                <div class="step pending" id="step2-indicator">
                    <div class="step-number">2</div>
                    <span>Configura Opzioni</span>
                </div>
                <div class="step pending" id="step3-indicator">
                    <div class="step-number">3</div>
                    <span>Genera Varianti</span>
                </div>
                <div class="step pending" id="step4-indicator">
                    <div class="step-number">4</div>
                    <span>Inserisci Dati</span>
                </div>
            </div>
        </div>
        
        <!-- Step 1: Product Selection -->
        <div class="step-content active" id="step1-content">
            <div class="step-title">üì¶ Step 1: Seleziona Prodotto</div>
            <div class="step-description">
                Scegli il prodotto per cui vuoi gestire le varianti avanzate.
            </div>
            
            <div class="form-group">
                <label class="form-label" for="productSearch">Cerca Prodotto</label>
                <input 
                    type="text" 
                    class="form-input" 
                    id="productSearch" 
                    placeholder="Digita il nome del prodotto..."
                    oninput="searchProducts()"
                >
            </div>
            
            <div id="productsList">
                <!-- Products will be loaded here -->
            </div>
            
            <div class="step-navigation">
                <div></div>
                <button class="btn btn-primary" onclick="nextStep()" disabled id="step1-next">
                    Avanti ‚Üí
                </button>
            </div>
        </div>
        
        <!-- Step 2: Options Configuration -->
        <div class="step-content" id="step2-content">
            <div class="step-title">‚öôÔ∏è Step 2: Configura Opzioni</div>
            <div class="step-description">
                Definisci le opzioni del prodotto (es. Taglia, Colore) e i loro valori.
            </div>
            
            <div id="optionsList">
                <!-- Options will be rendered here -->
            </div>
            
            <button class="btn btn-outline" onclick="addOption()">
                + Aggiungi Opzione
            </button>
            
            <div class="step-navigation">
                <button class="btn btn-outline" onclick="prevStep()">
                    ‚Üê Indietro
                </button>
                <button class="btn btn-primary" onclick="nextStep()" disabled id="step2-next">
                    Avanti ‚Üí
                </button>
            </div>
        </div>
        
        <!-- Step 3: Generate Variants -->
        <div class="step-content" id="step3-content">
            <div class="step-title">üîÑ Step 3: Genera Varianti</div>
            <div class="step-description">
                Anteprima delle varianti che verranno generate dalle opzioni configurate.
            </div>
            
            <div id="variantsPreview">
                <!-- Variants preview will be shown here -->
            </div>
            
            <div class="step-navigation">
                <button class="btn btn-outline" onclick="prevStep()">
                    ‚Üê Indietro
                </button>
                <button class="btn btn-success" onclick="generateVariants()" id="generate-btn">
                    üöÄ Genera Varianti
                </button>
            </div>
        </div>
        
        <!-- Step 4: Input Variant Data -->
        <div class="step-content" id="step4-content">
            <div class="step-title">üìù Step 4: Inserisci Dati Varianti</div>
            <div class="step-description">
                Completa i dati per ogni variante generata.
            </div>
            
            <div class="form-group">
                <div style="display: flex; gap: 1rem; margin-bottom: 1rem;">
                    <button class="btn btn-outline" onclick="applyBulkPrice()">
                        üí∞ Applica Prezzo a Tutte
                    </button>
                    <button class="btn btn-outline" onclick="generateBulkSKU()">
                        üè∑Ô∏è Genera SKU Automatici
                    </button>
                </div>
            </div>
            
            <div class="variants-grid" id="variantsGrid">
                <!-- Variant input forms will be rendered here -->
            </div>
            
            <div class="step-navigation">
                <button class="btn btn-outline" onclick="prevStep()">
                    ‚Üê Indietro
                </button>
                <button class="btn btn-success" onclick="saveVariants()" id="save-btn">
                    üíæ Salva Varianti
                </button>
            </div>
        </div>
    </div>
    
    <script>
        // Global state
        let currentStep = 1;
        let selectedProduct = null;
        let options = [];
        let generatedVariants = [];
        let products = [];
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üîß Variants Manager page initialized');
            loadProducts();
        });
        
        // Load products for selection
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                const result = await response.json();
                
                if (result.success) {
                    products = result.data;
                    renderProducts();
                    console.log('‚úÖ Products loaded:', products.length);
                } else {
                    showError('Errore nel caricamento dei prodotti');
                }
            } catch (error) {
                console.error('‚ùå Error loading products:', error);
                showError('Errore nel caricamento dei prodotti');
            }
        }
        
        // Render products list
        function renderProducts(filteredProducts = null) {
            const container = document.getElementById('productsList');
            const productsToRender = filteredProducts || products;
            
            if (productsToRender.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #718096; padding: 2rem;">Nessun prodotto trovato</p>';
                return;
            }
            
            container.innerHTML = productsToRender.map(product => `
                <div class="product-card" onclick="selectProduct(${product.id})">
                    <div class="product-title">${product.title}</div>
                    <div class="product-meta">
                        ${product.category?.name || 'Nessuna categoria'} ‚Ä¢ 
                        ${product.variants?.length || 0} varianti esistenti ‚Ä¢ 
                        Stato: ${getStatusLabel(product.status)}
                    </div>
                </div>
            `).join('');
        }
        
        // Search products
        function searchProducts() {
            const searchTerm = document.getElementById('productSearch').value.toLowerCase();
            if (searchTerm === '') {
                renderProducts();
                return;
            }
            
            const filtered = products.filter(product => 
                product.title.toLowerCase().includes(searchTerm) ||
                (product.description && product.description.toLowerCase().includes(searchTerm))
            );
            renderProducts(filtered);
        }
        
        // Select product
        function selectProduct(productId) {
            selectedProduct = products.find(p => p.id === productId);
            
            // Update UI
            document.querySelectorAll('.product-card').forEach(card => {
                card.classList.remove('selected');
            });
            event.target.closest('.product-card').classList.add('selected');
            
            // Enable next button
            document.getElementById('step1-next').disabled = false;
            
            console.log('‚úÖ Product selected:', selectedProduct);
        }
        
        // Add option
        function addOption() {
            const optionId = Date.now();
            options.push({
                id: optionId,
                name: '',
                values: []
            });
            renderOptions();
        }
        
        // Render options
        function renderOptions() {
            const container = document.getElementById('optionsList');
            
            if (options.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #718096; padding: 2rem;">Nessuna opzione configurata. Aggiungi la prima opzione.</p>';
                return;
            }
            
            container.innerHTML = options.map((option, index) => `
                <div class="option-item">
                    <div class="option-header">
                        <span class="option-title">Opzione ${index + 1}</span>
                        <button class="btn btn-outline" onclick="removeOption(${option.id})" style="padding: 0.25rem 0.5rem; font-size: 0.75rem;">
                            üóëÔ∏è Rimuovi
                        </button>
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 2fr; gap: 1rem;">
                        <div class="form-group">
                            <label class="form-label">Nome Opzione</label>
                            <input 
                                type="text" 
                                class="form-input" 
                                value="${option.name}"
                                placeholder="Es. Taglia, Colore"
                                onchange="updateOption(${option.id}, 'name', this.value)"
                            >
                        </div>
                        <div class="form-group">
                            <label class="form-label">Valori (separati da virgola)</label>
                            <input 
                                type="text" 
                                class="form-input" 
                                value="${option.values.join(', ')}"
                                placeholder="Es. XS, S, M, L, XL"
                                onchange="updateOption(${option.id}, 'values', this.value.split(',').map(v => v.trim()).filter(v => v))"
                            >
                        </div>
                    </div>
                </div>
            `).join('');
            
            updateStep2NextButton();
        }
        
        // Update option
        function updateOption(optionId, field, value) {
            const option = options.find(o => o.id === optionId);
            if (option) {
                option[field] = value;
                updateStep2NextButton();
            }
        }
        
        // Remove option
        function removeOption(optionId) {
            options = options.filter(o => o.id !== optionId);
            renderOptions();
        }
        
        // Update step 2 next button
        function updateStep2NextButton() {
            const hasValidOptions = options.length > 0 && 
                options.every(option => option.name && option.values.length > 0);
            document.getElementById('step2-next').disabled = !hasValidOptions;
        }
        
        // Generate variants preview
        function generateVariantsPreview() {
            if (options.length === 0) {
                document.getElementById('variantsPreview').innerHTML = 
                    '<p style="text-align: center; color: #718096; padding: 2rem;">Configura almeno una opzione per vedere l\'anteprima delle varianti.</p>';
                return;
            }
            
            // Generate all combinations
            const combinations = generateCombinations(options);
            
            const preview = document.getElementById('variantsPreview');
            preview.innerHTML = `
                <div style="margin-bottom: 1rem;">
                    <strong>Verranno generate ${combinations.length} varianti:</strong>
                </div>
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 0.5rem;">
                    ${combinations.map((combo, index) => `
                        <div style="background: #f7fafc; padding: 0.5rem; border-radius: 4px; font-size: 0.875rem;">
                            <strong>Variante ${index + 1}</strong><br>
                            ${combo.map(c => `${c.name}: ${c.value}`).join('<br>')}
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        // Generate combinations
        function generateCombinations(options) {
            if (options.length === 0) return [];
            
            function cartesianProduct(arrays) {
                return arrays.reduce((acc, curr) => {
                    const result = [];
                    acc.forEach(a => {
                        curr.forEach(c => {
                            result.push([...a, c]);
                        });
                    });
                    return result;
                }, [[]]);
            }
            
            const optionArrays = options.map(option => 
                option.values.map(value => ({ name: option.name, value }))
            );
            
            return cartesianProduct(optionArrays);
        }
        
        // Generate variants
        async function generateVariants() {
            try {
                const combinations = generateCombinations(options);
                generatedVariants = combinations.map((combo, index) => ({
                    id: `temp_${index}`,
                    title: combo.map(c => c.value).join(' / '),
                    options: combo,
                    sku: '',
                    price: '',
                    compare_at_price: '',
                    inventory_quantity: 0,
                    barcode: '',
                    weight: ''
                }));
                
                nextStep();
                renderVariantsGrid();
                
                showSuccess(`Generate ${generatedVariants.length} varianti!`);
            } catch (error) {
                console.error('‚ùå Error generating variants:', error);
                showError('Errore nella generazione delle varianti');
            }
        }
        
        // Render variants grid
        function renderVariantsGrid() {
            const container = document.getElementById('variantsGrid');
            
            container.innerHTML = generatedVariants.map((variant, index) => `
                <div class="variant-card">
                    <div class="variant-header">${variant.title}</div>
                    <div class="variant-options">${variant.options.map(o => `${o.name}: ${o.value}`).join(' ‚Ä¢ ')}</div>
                    <div class="variant-fields">
                        <div class="variant-field">
                            <label>SKU</label>
                            <input type="text" value="${variant.sku}" onchange="updateVariant(${index}, 'sku', this.value)">
                        </div>
                        <div class="variant-field">
                            <label>Prezzo *</label>
                            <input type="number" step="0.01" value="${variant.price}" onchange="updateVariant(${index}, 'price', this.value)" required>
                        </div>
                        <div class="variant-field">
                            <label>Prezzo Confronto</label>
                            <input type="number" step="0.01" value="${variant.compare_at_price}" onchange="updateVariant(${index}, 'compare_at_price', this.value)">
                        </div>
                        <div class="variant-field">
                            <label>Inventario</label>
                            <input type="number" value="${variant.inventory_quantity}" onchange="updateVariant(${index}, 'inventory_quantity', this.value)">
                        </div>
                        <div class="variant-field">
                            <label>Barcode</label>
                            <input type="text" value="${variant.barcode}" onchange="updateVariant(${index}, 'barcode', this.value)">
                        </div>
                        <div class="variant-field">
                            <label>Peso (kg)</label>
                            <input type="number" step="0.01" value="${variant.weight}" onchange="updateVariant(${index}, 'weight', this.value)">
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // Update variant
        function updateVariant(index, field, value) {
            if (generatedVariants[index]) {
                generatedVariants[index][field] = value;
            }
        }
        
        // Bulk operations
        function applyBulkPrice() {
            const price = prompt('Inserisci il prezzo da applicare a tutte le varianti:');
            if (price && !isNaN(price)) {
                generatedVariants.forEach((variant, index) => {
                    variant.price = price;
                });
                renderVariantsGrid();
                showSuccess('Prezzo applicato a tutte le varianti!');
            }
        }
        
        function generateBulkSKU() {
            const prefix = prompt('Inserisci il prefisso per gli SKU (es. PROD):') || 'VAR';
            generatedVariants.forEach((variant, index) => {
                const suffix = variant.options.map(o => o.value.substring(0, 2).toUpperCase()).join('-');
                variant.sku = `${prefix}-${suffix}-${String(index + 1).padStart(3, '0')}`;
            });
            renderVariantsGrid();
            showSuccess('SKU generati automaticamente!');
        }
        
        // Save variants
        async function saveVariants() {
            try {
                // Validate
                const errors = [];
                generatedVariants.forEach((variant, index) => {
                    if (!variant.price || parseFloat(variant.price) <= 0) {
                        errors.push(`Variante ${index + 1}: Prezzo richiesto`);
                    }
                });
                
                if (errors.length > 0) {
                    showError('Errori di validazione:\n' + errors.join('\n'));
                    return;
                }
                
                // Prepare data
                const variantsData = generatedVariants.map(variant => ({
                    title: variant.title,
                    sku: variant.sku,
                    price: parseFloat(variant.price),
                    compare_at_price: variant.compare_at_price ? parseFloat(variant.compare_at_price) : null,
                    inventory_quantity: parseInt(variant.inventory_quantity) || 0,
                    barcode: variant.barcode,
                    weight: variant.weight ? parseFloat(variant.weight) : null,
                    weight_unit: 'kg',
                    selectedOptions: variant.options
                }));
                
                const optionsData = options.map((option, index) => ({
                    name: option.name,
                    position: index + 1,
                    values: option.values
                }));
                
                // Save to backend
                const response = await fetch(`/api/products/${selectedProduct.id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ...selectedProduct,
                        options: optionsData,
                        variants: variantsData
                    })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Errore nel salvataggio');
                }
                
                showSuccess('Varianti salvate con successo!');
                
                // Redirect after delay
                setTimeout(() => {
                    window.location.href = '/products';
                }, 2000);
                
            } catch (error) {
                console.error('‚ùå Error saving variants:', error);
                showError(error.message);
            }
        }
        
        // Navigation
        function nextStep() {
            if (currentStep < 4) {
                // Hide current step
                document.getElementById(`step${currentStep}-content`).classList.remove('active');
                document.getElementById(`step${currentStep}-indicator`).classList.remove('active');
                document.getElementById(`step${currentStep}-indicator`).classList.add('completed');
                
                currentStep++;
                
                // Show next step
                document.getElementById(`step${currentStep}-content`).classList.add('active');
                document.getElementById(`step${currentStep}-indicator`).classList.add('active');
                document.getElementById(`step${currentStep}-indicator`).classList.remove('pending');
                
                // Special handling for step 3
                if (currentStep === 3) {
                    generateVariantsPreview();
                }
            }
        }
        
        function prevStep() {
            if (currentStep > 1) {
                // Hide current step
                document.getElementById(`step${currentStep}-content`).classList.remove('active');
                document.getElementById(`step${currentStep}-indicator`).classList.remove('active');
                document.getElementById(`step${currentStep}-indicator`).classList.add('pending');
                
                currentStep--;
                
                // Show previous step
                document.getElementById(`step${currentStep}-content`).classList.add('active');
                document.getElementById(`step${currentStep}-indicator`).classList.add('active');
                document.getElementById(`step${currentStep}-indicator`).classList.remove('completed');
            }
        }
        
        // Utility functions
        function getStatusLabel(status) {
            const labels = {
                'active': 'Attivo',
                'draft': 'Bozza',
                'archived': 'Archiviato'
            };
            return labels[status] || status;
        }
        
        function showSuccess(message) {
            showNotification(message, 'success');
        }
        
        function showError(message) {
            showNotification(message, 'error');
        }
        
        function showNotification(message, type) {
            // Remove existing notifications
            const existing = document.querySelector('.notification');
            if (existing) existing.remove();
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Hide notification after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
    </script>
</body>
</html>