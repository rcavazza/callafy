
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestione Attributi - Inventory Manager</title>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            color: #1a202c;
            line-height: 1.6;
        }
        
        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid #e2e8f0;
            padding: 1rem 2rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }
        .header h1 { 
            color: #2d3748; 
            font-size: 1.5rem; 
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .back-btn {
            background: #e2e8f0;
            color: #4a5568;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.875rem;
            transition: background 0.2s;
        }
        .back-btn:hover { background: #cbd5e0; }
        
        /* Container */
        .container { 
            max-width: 1400px; 
            margin: 0 auto; 
            padding: 2rem; 
        }
        
        /* Controls */
        .controls {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: center;
            justify-content: space-between;
        }
        .search-filters {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }
        .search-input {
            padding: 0.5rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.875rem;
            min-width: 250px;
        }
        .filter-select {
            padding: 0.5rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.875rem;
            background: white;
            min-width: 150px;
        }
        
        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: #3182ce;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn:hover { background: #2c5282; transform: translateY(-1px); }
        .btn-success { background: #38a169; }
        .btn-success:hover { background: #2f855a; }
        .btn-danger { background: #e53e3e; }
        .btn-danger:hover { background: #c53030; }
        .btn-outline {
            background: transparent;
            color: #3182ce;
            border: 1px solid #3182ce;
        }
        .btn-outline:hover {
            background: #3182ce;
            color: white;
        }
        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.75rem;
        }
        
        /* Table */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        .table th,
        .table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        .table th {
            background: #f7fafc;
            font-weight: 600;
            color: #2d3748;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .table tbody tr:hover {
            background: #f7fafc;
        }
        .table tbody tr:last-child td {
            border-bottom: none;
        }
        
        /* Attribute specific styles */
        .attribute-key {
            font-weight: 600;
            color: #2d3748;
        }
        .attribute-value {
            font-family: 'Monaco', 'Menlo', monospace;
            background: #f7fafc;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.875rem;
        }
        .attribute-type {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
        }
        .type-string { background: #e6fffa; color: #234e52; }
        .type-number { background: #fef5e7; color: #744210; }
        .type-boolean { background: #e0e7ff; color: #3730a3; }
        .type-date { background: #f0fff4; color: #22543d; }
        .type-json { background: #fdf2f8; color: #831843; }
        
        .namespace-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            background: #edf2f7;
            color: #4a5568;
        }
        .namespace-custom { background: #e6fffa; color: #234e52; }
        .namespace-shopify { background: #fef5e7; color: #744210; }
        .namespace-seo { background: #e0e7ff; color: #3730a3; }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        .modal.show {
            display: flex;
        }
        .modal-content {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }
        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
        }
        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #718096;
            padding: 0;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .close-btn:hover { color: #2d3748; }
        
        /* Form */
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #2d3748;
            font-size: 0.875rem;
        }
        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.875rem;
            transition: border-color 0.2s;
        }
        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #3182ce;
            box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
        }
        .form-textarea {
            resize: vertical;
            min-height: 100px;
        }
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        .form-row-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 1rem;
        }
        
        /* Value input based on type */
        .value-input-container {
            position: relative;
        }
        .value-preview {
            margin-top: 0.5rem;
            padding: 0.5rem;
            background: #f7fafc;
            border-radius: 4px;
            font-size: 0.875rem;
            color: #4a5568;
        }
        
        /* Loading and empty states */
        .loading {
            text-align: center;
            padding: 3rem;
            color: #718096;
        }
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #718096;
        }
        .empty-state h3 {
            color: #2d3748;
            margin-bottom: 0.5rem;
        }
        
        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin-top: 1.5rem;
            padding: 1rem;
        }
        .pagination-info {
            color: #718096;
            font-size: 0.875rem;
        }
        
        /* Notifications */
        .notification {
            position: fixed;
            top: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            z-index: 2000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        .notification.show {
            transform: translateX(0);
        }
        .notification.success {
            background: #38a169;
        }
        .notification.error {
            background: #e53e3e;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .container { padding: 1rem; }
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            .search-filters {
                flex-direction: column;
                width: 100%;
            }
            .search-input, .filter-select {
                min-width: auto;
                width: 100%;
            }
            .table-container {
                overflow-x: auto;
            }
            .modal-content {
                margin: 1rem;
                width: calc(100% - 2rem);
            }
            .form-row, .form-row-3 {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>🏷️ Gestione Attributi</h1>
            <a href="/dashboard-new" class="back-btn">← Dashboard</a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="container">
        <!-- Controls -->
        <div class="controls">
            <div class="search-filters">
                <input 
                    type="text" 
                    class="search-input" 
                    placeholder="Cerca attributi..." 
                    id="searchInput"
                    onkeyup="handleSearch()"
                >
                <select class="filter-select" id="productFilter" onchange="handleFilter()">
                    <option value="">Tutti i prodotti</option>
                </select>
                <select class="filter-select" id="namespaceFilter" onchange="handleFilter()">
                    <option value="">Tutti i namespace</option>
                    <option value="custom">Custom</option>
                    <option value="shopify">Shopify</option>
                    <option value="seo">SEO</option>
                </select>
                <select class="filter-select" id="typeFilter" onchange="handleFilter()">
                    <option value="">Tutti i tipi</option>
                    <option value="string">String</option>
                    <option value="number">Number</option>
                    <option value="boolean">Boolean</option>
                    <option value="date">Date</option>
                    <option value="json">JSON</option>
                </select>
            </div>
            <button class="btn" onclick="openCreateModal()">
                ➕ Nuovo Attributo
            </button>
        </div>
        
        <!-- Table -->
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Chiave</th>
                        <th>Valore</th>
                        <th>Tipo</th>
                        <th>Namespace</th>
                        <th>Prodotto</th>
                        <th>Variante</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody id="attributesTableBody">
                    <tr>
                        <td colspan="7" class="loading">
                            Caricamento attributi...
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        <div class="pagination">
            <button class="btn btn-outline btn-sm" id="prevBtn" onclick="previousPage()" disabled>
                ← Precedente
            </button>
            <span class="pagination-info" id="paginationInfo">
                Pagina 1 di 1
            </span>
            <button class="btn btn-outline btn-sm" id="nextBtn" onclick="nextPage()" disabled>
                Successivo →
            </button>
        </div>
    </div>
    
    <!-- Create/Edit Attribute Modal -->
    <div class="modal" id="attributeModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Nuovo Attributo</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            
            <form id="attributeForm" onsubmit="handleSubmit(event)">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="attributeProduct">Prodotto *</label>
                        <select class="form-select" id="attributeProduct" name="product_id" required onchange="loadVariantsForProduct()">
                            <option value="">Seleziona prodotto</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="attributeVariant">Variante</label>
                        <select class="form-select" id="attributeVariant" name="variant_id">
                            <option value="">Nessuna variante specifica</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="attributeNamespace">Namespace</label>
                        <select class="form-select" id="attributeNamespace" name="namespace">
                            <option value="custom">Custom</option>
                            <option value="shopify">Shopify</option>
                            <option value="seo">SEO</option>
                            <option value="technical">Technical</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="attributeCategory">Categoria</label>
                        <input 
                            type="text" 
                            class="form-input" 
                            id="attributeCategory" 
                            name="category"
                            placeholder="Es. product-info, meta-data..."
                        >
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label" for="attributeKey">Chiave *</label>
                        <input 
                            type="text" 
                            class="form-input" 
                            id="attributeKey" 
                            name="key" 
                            required
                            placeholder="Es. weight, color, description..."
                        >
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="attributeType">Tipo Valore</label>
                        <select class="form-select" id="attributeType" name="value_type" onchange="handleTypeChange()">
                            <option value="string">String</option>
                            <option value="number">Number</option>
                            <option value="boolean">Boolean</option>
                            <option value="date">Date</option>
                            <option value="json">JSON</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="attributeValue">Valore</label>
                    <div class="value-input-container">
                        <input 
                            type="text" 
                            class="form-input" 
                            id="attributeValue" 
                            name="value"
                            placeholder="Inserisci il valore..."
                        >
                        <div class="value-preview" id="valuePreview" style="display: none;"></div>
                    </div>
                </div>
                
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-outline" onclick="closeModal()">
                        Annulla
                    </button>
                    <button type="submit" class="btn" id="submitBtn">
                        Salva Attributo
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        console.log('🏷️ Attributes JavaScript loaded!');
        
        // Global state
        let attributes = [];
        let products = [];
        let variants = [];
        let currentPage = 1;
        let totalPages = 1;
        let currentAttribute = null;
        let searchTerm = '';
        let productFilter = '';
        let namespaceFilter = '';
        let typeFilter = '';
        
        // API functions
        async function loadAttributes() {
            try {
                console.log('🏷️ Loading attributes...');
                const params = new URLSearchParams({
                    page: currentPage,
                    limit: 10
                });
                
                if (searchTerm) params.append('search', searchTerm);
                if (productFilter) params.append('product_id', productFilter);
                if (namespaceFilter) params.append('namespace', namespaceFilter);
                if (typeFilter) params.append('value_type', typeFilter);
                
                const response = await fetch(`/api/attributes?${params}`);
                if (!response.ok) throw new Error('Failed to load attributes');
                
                const data = await response.json();
                attributes = data.data || [];
                
                renderAttributes();
                updatePagination();
                
                console.log('✅ Attributes loaded:', attributes.length);
            } catch (error) {
                console.error('❌ Error loading attributes:', error);
                showError('Errore nel caricamento degli attributi');
            }
        }
        
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                if (!response.ok) throw new Error('Failed to load products');
                
                const data = await response.json();
                products = data.data || [];
                
                // Populate product dropdowns
                const productSelect = document.getElementById('attributeProduct');
                const productFilter = document.getElementById('productFilter');
                
                productSelect.innerHTML = '<option value="">Seleziona prodotto</option>';
                productFilter.innerHTML = '<option value="">Tutti i prodotti</option>';
                
                products.forEach(product => {
                    productSelect.innerHTML += `<option value="${product.id}">${product.title}</option>`;
                    productFilter.innerHTML += `<option value="${product.id}">${product.title}</option>`;
                });
                
                console.log('✅ Products loaded:', products.length);
            } catch (error) {
                console.error('❌ Error loading products:', error);
            }
        }
        
        async function loadVariantsForProduct() {
            const productId = document.getElementById('attributeProduct').value;
            const variantSelect = document.getElementById('attributeVariant');
            
            variantSelect.innerHTML = '<option value="">Nessuna variante specifica</option>';
            
            if (!productId) return;
            
            try {
                const response = await fetch(`/api/variants?product_id=${productId}`);
                if (!response.ok) throw new Error('Failed to load variants');
                
                const data = await response.json();
                const variants = data.data || [];
                
                variants.forEach(variant => {
                    const label = variant.sku ? `${variant.sku}` : `Variante ${variant.id}`;
                    variantSelect.innerHTML += `<option value="${variant.id}">${label}</option>`;
                });
                
            } catch (error) {
                console.error('❌ Error loading variants:', error);
            }
        }
        
        async function createAttribute(attributeData) {
            try {
                console.log('🏷️ Creating attribute:', attributeData);
                const response = await fetch('/api/attributes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(attributeData)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to create attribute');
                }
                
                const result = await response.json();
                console.log('✅ Attribute created:', result.data);
                
                closeModal();
                loadAttributes();
                showSuccess('Attributo creato con successo!');
                
                return result.data;
            } catch (error) {
                console.error('❌ Error creating attribute:', error);
                showError(error.message);
                throw error;
            }
        }
        
        async function updateAttribute(id, attributeData) {
            try {
                console.log('🏷️ Updating attribute:', id, attributeData);
                const response = await fetch(`/api/attributes/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(attributeData)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to update attribute');
                }
                
                const result = await response.json();
                console.log('✅ Attribute updated:', result.data);
                
                closeModal();
                loadAttributes();
                showSuccess('Attributo aggiornato con successo!');
                
                return result.data;
            } catch (error) {
                console.error('❌ Error updating attribute:', error);
                showError(error.message);
                throw error;
            }
        }
        
        async function deleteAttribute(id) {
            if (!confirm('Sei sicuro di voler eliminare questo attributo?')) return;
            
            try {
                console.log('🏷️ Deleting attribute:', id);
                const response = await fetch(`/api/attributes/${id}`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to delete attribute');
                }
                
                console.log('✅ Attribute deleted');
                loadAttributes();
                showSuccess('Attributo eliminato con successo!');
            } catch (error) {
                console.error('❌ Error deleting attribute:', error);
                showError(error.message);
            }
        }
        
        // Render functions
        function renderAttributes() {
            const tbody = document.getElementById('attributesTableBody');
            
            if (attributes.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="empty-state">
                            <h3>Nessun attributo trovato</h3>
                            <p>Inizia creando il tuo primo attributo</p>
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = attributes.map(attribute => {
                const productName = attribute.product?.title || 'Prodotto sconosciuto';
                const variantInfo = attribute.variant ? attribute.variant.sku || `Variante ${attribute.variant.id}` : '-';
                const formattedValue = formatAttributeValue(attribute.value, attribute.value_type);
                
                return `
                    <tr>
                        <td>
                            <div class="attribute-key">${attribute.key}</div>
                        </td>
                        <td>
                            <div class="attribute-value">${formattedValue}</div>
                        </td>
                        <td>
                            <span class="attribute-type type-${attribute.value_type}">
                                ${attribute.value_type}
                            </span>
                        </td>
                        <td>
                            <span class="namespace-badge namespace-${attribute.namespace}">
                                ${attribute.namespace}
                            </span>
                        </td>
                        <td>${productName}</td>
                        <td>${variantInfo}</td>
                        <td>
                            <div style="display: flex; gap: 0.5rem;">
                                <button class="btn btn-outline btn-sm" onclick="editAttribute(${attribute.id})">
                                    ✏️ Modifica
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="deleteAttribute(${attribute.id})">
                                    🗑️ Elimina
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        function formatAttributeValue(value, type) {
            if (!value) return '-';
            
            switch (type) {
                case 'boolean':
                    return value === 'true' || value === true ? '✅ True' : '❌ False';
                case 'number':
                    return parseFloat(value).toLocaleString();
                case 'date':
                    try {
                        return new Date(value).toLocaleDateString('it-IT');
                    } catch {
                        return value;
                    }
                case 'json':
                    try {
                        return JSON.stringify(JSON.parse(value), null, 2).substring(0, 50) + '...';
                    } catch {
                        return value;
                    }
                default:
                    return value.length > 50 ? value.substring(0, 50) + '...' : value;
            }
        }
        
        function updatePagination() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const paginationInfo = document.getElementById('paginationInfo');
            
            prevBtn.disabled = currentPage <= 1;
            nextBtn.disabled = currentPage >= totalPages;
            
            paginationInfo.textContent = `Pagina ${currentPage} di ${totalPages}`;
        }
        
        // Modal functions
        function openCreateModal() {
            currentAttribute = null;
            document.getElementById('modalTitle').textContent = 'Nuovo Attributo';
            document.getElementById('submitBtn').textContent = 'Salva Attributo';
            document.getElementById('attributeForm').reset();
            
            // Set default values
            document.getElementById('attributeNamespace').value = 'custom';
            document.getElementById('attributeType').value = 'string';
            
            document.getElementById('attributeModal').classList.add('show');
        }
        
        async function editAttribute(id) {
            try {
                console.log('🏷️ Loading attribute for edit:', id);
                const response = await fetch(`/api/attributes/${id}`);
                if (!response.ok) throw new Error('Failed to load attribute');
                
                const result = await response.json();
                currentAttribute = result.data;
                
                // Populate form
                document.getElementById('modalTitle').textContent = 'Modifica Attributo';
                document.getElementById('submitBtn').textContent = 'Aggiorna Attributo';
                
                document.getElementById('attributeProduct').value = currentAttribute.product_id || '';
                document.getElementById('attributeVariant').value = currentAttribute.variant_id || '';
                document.getElementById('attributeNamespace').value = currentAttribute.namespace || 'custom';
                document.getElementById('attributeCategory').value = currentAttribute.category || '';
                document.getElementById('attributeKey').value = currentAttribute.key || '';
                document.getElementById('attributeType').value = currentAttribute.value_type || 'string';
                document.getElementById('attributeValue').value = currentAttribute.value || '';
                
                // Load variants for selected product
                if (currentAttribute.product_id) {
                    await loadVariantsForProduct();
                    document.getElementById('attributeVariant').value = currentAttribute.variant_id || '';
                }
                
                // Update value input based on type
                handleTypeChange();
                
                document.getElementById('attributeModal').classList.add('show');
                
                console.log('✅ Attribute loaded for edit:', currentAttribute);
            } catch (error) {
                console.error('❌ Error loading attribute:', error);
                showError('Errore nel caricamento dell\'attributo');
            }
        }
        
        function closeModal() {
            document.getElementById('attributeModal').classList.remove('show');
            currentAttribute = null;
        }
        
        // Form handling
        async function handleSubmit(event) {
            event.preventDefault();
            
            try {
                const formData = new FormData(event.target);
                const attributeData = {
                    product_id: parseInt(formData.get('product_id')),
                    variant_id: formData.get('variant_id') ? parseInt(formData.get('variant_id')) : null,
                    namespace: formData.get('namespace') || 'custom',
                    category: formData.get('category') || '',
                    key: formData.get('key'),
                    value: formData.get('value') || '',
                    value_type: formData.get('value_type') || 'string'
                };
                
                // Validate and convert value based on type
                attributeData.value = validateAndConvertValue(attributeData.value, attributeData.value_type);
                
                if (currentAttribute) {
                    await updateAttribute(currentAttribute.id, attributeData);
                } else {
                    await createAttribute(attributeData);
                }
            } catch (error) {
                console.error('❌ Form submission error:', error);
            }
        }
        
        function validateAndConvertValue(value, type) {
            if (!value) return '';
            
            switch (type) {
                case 'number':
                    const num = parseFloat(value);
                    if (isNaN(num)) throw new Error('Valore numerico non valido');
                    return num.toString();
                    
                case 'boolean':
                    if (value.toLowerCase() === 'true' || value === '1') return 'true';
                    if (value.toLowerCase() === 'false' || value === '0') return 'false';
                    throw new Error('Valore booleano non valido (usa true/false)');
                    
                case 'date':
                    const date = new Date(value);
                    if (isNaN(date.getTime())) throw new Error('Data non valida');
                    return date.toISOString();
                    
                case 'json':
                    try {
                        JSON.parse(value);
                        return value;
                    } catch {
                        throw new Error('JSON non valido');
                    }
                    
                default:
                    return value;
            }
        }
        
        // Type change handler
        function handleTypeChange() {
            const type = document.getElementById('attributeType').value;
            const valueInput = document.getElementById('attributeValue');
            const preview = document.getElementById('valuePreview');
            
            // Update input placeholder and type
            switch (type) {
                case 'string':
                    valueInput.type = 'text';
                    valueInput.placeholder = 'Inserisci testo...';
                    break;
                case 'number':
                    valueInput.type = 'number';
                    valueInput.placeholder = 'Inserisci numero...';
                    break;
                case 'boolean':
                    valueInput.type = 'text';
                    valueInput.placeholder = 'true o false';
                    break;
                case 'date':
                    valueInput.type = 'datetime-local';
                    valueInput.placeholder = '';
                    break;
                case 'json':
                    valueInput.type = 'text';
                    valueInput.placeholder = '{"key": "value"}';
                    break;
            }
            
            // Update preview
            updateValuePreview();
        }
        
        function updateValuePreview() {
            const value = document.getElementById('attributeValue').value;
            const type = document.getElementById('attributeType').value;
            const preview = document.getElementById('valuePreview');
            
            if (!value) {
                preview.style.display = 'none';
                return;
            }
            
            try {
                const formattedValue = formatAttributeValue(value, type);
                preview.textContent = `Preview: ${formattedValue}`;
                preview.style.display = 'block';
                preview.style.color = '#4a5568';
            } catch (error) {
                preview.textContent = `Errore: ${error.message}`;
                preview.style.display = 'block';
                preview.style.color = '#e53e3e';
            }
        }
        
        // Search and filter functions
        function handleSearch() {
            searchTerm = document.getElementById('searchInput').value;
            currentPage = 1;
            loadAttributes();
        }
        
        function handleFilter() {
            productFilter = document.getElementById('productFilter').value;
            namespaceFilter = document.getElementById('namespaceFilter').value;
            typeFilter = document.getElementById('typeFilter').value;
            currentPage = 1;
            loadAttributes();
        }
        
        // Pagination functions
        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                loadAttributes();
            }
        }
        
        function nextPage() {
            if (currentPage < totalPages) {
                currentPage++;
                loadAttributes();
            }
        }
        
        // Notification functions
        function showSuccess(message) {
            showNotification(message, 'success');
        }
        
        function showError(message) {
            showNotification(message, 'error');
        }
        
        function showNotification(message, type) {
            // Remove existing notifications
            const existing = document.querySelector('.notification');
            if (existing) existing.remove();
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Hide notification after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🏷️ Attributes page initialized');
            
            // Load initial data
            loadProducts();
            loadAttributes();
            
            // Close modal when clicking outside
            document.getElementById('attributeModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });
            
            // Handle escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeModal();
                }
            });
            
            // Add value input listener for preview
            document.getElementById('attributeValue').addEventListener('input', updateValuePreview);
        });
        
        // Debounce search
        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(handleSearch, 300);
        });
    </script>
</body>
</html>