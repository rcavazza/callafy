
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestione Categorie - Inventory Manager</title>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            color: #1a202c;
            line-height: 1.6;
        }
        
        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid #e2e8f0;
            padding: 1rem 2rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }
        .header h1 { 
            color: #2d3748; 
            font-size: 1.5rem; 
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .back-btn {
            background: #e2e8f0;
            color: #4a5568;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.875rem;
            transition: background 0.2s;
        }
        .back-btn:hover { background: #cbd5e0; }
        
        /* Container */
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 2rem; 
        }
        
        /* Controls */
        .controls {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: center;
            justify-content: space-between;
        }
        .search-filters {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }
        .search-input {
            padding: 0.5rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.875rem;
            min-width: 250px;
        }
        .filter-select {
            padding: 0.5rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.875rem;
            background: white;
        }
        
        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: #3182ce;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
        }
        .btn:hover { background: #2c5282; transform: translateY(-1px); }
        .btn-success { background: #38a169; }
        .btn-success:hover { background: #2f855a; }
        .btn-danger { background: #e53e3e; }
        .btn-danger:hover { background: #c53030; }
        .btn-outline {
            background: transparent;
            color: #3182ce;
            border: 1px solid #3182ce;
        }
        .btn-outline:hover {
            background: #3182ce;
            color: white;
        }
        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.75rem;
        }
        
        /* Table */
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        .table th,
        .table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        .table th {
            background: #f7fafc;
            font-weight: 600;
            color: #2d3748;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .table tbody tr:hover {
            background: #f7fafc;
        }
        .table tbody tr:last-child td {
            border-bottom: none;
        }
        
        /* Status badges */
        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .status-active {
            background: #c6f6d5;
            color: #22543d;
        }
        .status-inactive {
            background: #fed7d7;
            color: #742a2a;
        }
        
        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        .modal.show {
            display: flex;
        }
        .modal-content {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }
        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
        }
        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #718096;
            padding: 0;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .close-btn:hover { color: #2d3748; }
        
        /* Form */
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #2d3748;
            font-size: 0.875rem;
        }
        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.875rem;
            transition: border-color 0.2s;
        }
        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #3182ce;
            box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
        }
        .form-textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        /* Fields section */
        .fields-section {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #e2e8f0;
        }
        .field-item {
            background: #f7fafc;
            padding: 1rem;
            border-radius: 6px;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .field-info {
            flex: 1;
        }
        .field-name {
            font-weight: 500;
            color: #2d3748;
        }
        .field-details {
            font-size: 0.75rem;
            color: #718096;
            margin-top: 0.25rem;
        }
        .field-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        /* Loading and empty states */
        .loading {
            text-align: center;
            padding: 3rem;
            color: #718096;
        }
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #718096;
        }
        .empty-state h3 {
            color: #2d3748;
            margin-bottom: 0.5rem;
        }
        
        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin-top: 1.5rem;
            padding: 1rem;
        }
        .pagination-info {
            color: #718096;
            font-size: 0.875rem;
        }
        
        /* Notifications */
        .notification {
            position: fixed;
            top: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            z-index: 2000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        .notification.show {
            transform: translateX(0);
        }
        .notification.success {
            background: #38a169;
        }
        .notification.error {
            background: #e53e3e;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .container { padding: 1rem; }
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            .search-filters {
                flex-direction: column;
                width: 100%;
            }
            .search-input {
                min-width: auto;
                width: 100%;
            }
            .table-container {
                overflow-x: auto;
            }
            .modal-content {
                margin: 1rem;
                width: calc(100% - 2rem);
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <h1>📂 Gestione Categorie</h1>
            <a href="/dashboard-new" class="back-btn">← Dashboard</a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="container">
        <!-- Controls -->
        <div class="controls">
            <div class="search-filters">
                <input 
                    type="text" 
                    class="search-input" 
                    placeholder="Cerca categorie..." 
                    id="searchInput"
                    onkeyup="handleSearch()"
                >
                <select class="filter-select" id="statusFilter" onchange="handleFilter()">
                    <option value="">Tutti gli stati</option>
                    <option value="active">Attive</option>
                    <option value="inactive">Inattive</option>
                </select>
            </div>
            <button class="btn" onclick="openCreateModal()">
                ➕ Nuova Categoria
            </button>
        </div>
        
        <!-- Table -->
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Descrizione</th>
                        <th>Tipo Shopify</th>
                        <th>Campi Custom</th>
                        <th>Stato</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody id="categoriesTableBody">
                    <tr>
                        <td colspan="6" class="loading">
                            Caricamento categorie...
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        <div class="pagination">
            <button class="btn btn-outline btn-sm" id="prevBtn" onclick="previousPage()" disabled>
                ← Precedente
            </button>
            <span class="pagination-info" id="paginationInfo">
                Pagina 1 di 1
            </span>
            <button class="btn btn-outline btn-sm" id="nextBtn" onclick="nextPage()" disabled>
                Successivo →
            </button>
        </div>
    </div>
    
    <!-- Create/Edit Modal -->
    <div class="modal" id="categoryModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Nuova Categoria</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            
            <form id="categoryForm" onsubmit="handleSubmit(event)">
                <div class="form-group">
                    <label class="form-label" for="categoryName">Nome *</label>
                    <input 
                        type="text" 
                        class="form-input" 
                        id="categoryName" 
                        name="name" 
                        required
                        placeholder="Es. Elettronica"
                    >
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="categoryDescription">Descrizione</label>
                    <textarea 
                        class="form-textarea" 
                        id="categoryDescription" 
                        name="description"
                        placeholder="Descrizione della categoria..."
                    ></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="shopifyProductType">Tipo Prodotto Shopify</label>
                    <input 
                        type="text" 
                        class="form-input" 
                        id="shopifyProductType" 
                        name="shopify_product_type"
                        placeholder="Es. Electronics"
                    >
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="categoryStatus">Stato</label>
                    <select class="form-select" id="categoryStatus" name="status">
                        <option value="active">Attiva</option>
                        <option value="inactive">Inattiva</option>
                    </select>
                </div>
                
                <!-- Category Fields Section -->
                <div class="fields-section" id="fieldsSection" style="display: none;">
                    <h3>Campi Personalizzati</h3>
                    <div id="fieldsList"></div>
                    <button type="button" class="btn btn-outline btn-sm" onclick="openFieldModal()">
                        ➕ Aggiungi Campo
                    </button>
                </div>
                
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-outline" onclick="closeModal()">
                        Annulla
                    </button>
                    <button type="submit" class="btn" id="submitBtn">
                        Salva Categoria
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Field Modal -->
    <div class="modal" id="fieldModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Aggiungi Campo</h2>
                <button class="close-btn" onclick="closeFieldModal()">&times;</button>
            </div>
            
            <form id="fieldForm" onsubmit="handleFieldSubmit(event)">
                <div class="form-group">
                    <label class="form-label" for="fieldName">Nome Campo *</label>
                    <input 
                        type="text" 
                        class="form-input" 
                        id="fieldName" 
                        name="name" 
                        required
                        placeholder="Es. Brand"
                    >
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="fieldType">Tipo Campo</label>
                    <select class="form-select" id="fieldType" name="field_type" onchange="handleFieldTypeChange()">
                        <option value="string">Testo</option>
                        <option value="number">Numero</option>
                        <option value="boolean">Booleano</option>
                        <option value="date">Data</option>
                        <option value="text">Testo Lungo</option>
                        <option value="select">Selezione</option>
                    </select>
                </div>
                
                <div class="form-group" id="optionsGroup" style="display: none;">
                    <label class="form-label" for="fieldOptions">Opzioni (una per riga)</label>
                    <textarea 
                        class="form-textarea" 
                        id="fieldOptions" 
                        name="options"
                        placeholder="Opzione 1&#10;Opzione 2&#10;Opzione 3"
                    ></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">
                        <input type="checkbox" id="fieldRequired" name="required"> Campo obbligatorio
                    </label>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="fieldDefault">Valore Predefinito</label>
                    <input 
                        type="text" 
                        class="form-input" 
                        id="fieldDefault" 
                        name="default_value"
                        placeholder="Valore predefinito..."
                    >
                </div>
                
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-outline" onclick="closeFieldModal()">
                        Annulla
                    </button>
                    <button type="submit" class="btn">
                        Aggiungi Campo
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        console.log('📂 Categories JavaScript loaded!');
        
        // Global state
        let categories = [];
        let currentPage = 1;
        let totalPages = 1;
        let currentCategory = null;
        let searchTerm = '';
        let statusFilter = '';
        
        // API functions
        async function loadCategories() {
            try {
                console.log('📂 Loading categories...');
                const params = new URLSearchParams({
                    page: currentPage,
                    limit: 10
                });
                
                if (searchTerm) params.append('search', searchTerm);
                if (statusFilter) params.append('status', statusFilter);
                
                const response = await fetch(`/api/categories?${params}`);
                if (!response.ok) throw new Error('Failed to load categories');
                
                const data = await response.json();
                categories = data.data || [];
                totalPages = data.pagination?.pages || 1;
                
                renderCategories();
                updatePagination();
                
                console.log('✅ Categories loaded:', categories.length);
            } catch (error) {
                console.error('❌ Error loading categories:', error);
                showError('Errore nel caricamento delle categorie');
            }
        }
        
        async function createCategory(categoryData) {
            try {
                console.log('📂 Creating category:', categoryData);
                const response = await fetch('/api/categories', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(categoryData)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to create category');
                }
                
                const result = await response.json();
                console.log('✅ Category created:', result.data);
                
                closeModal();
                loadCategories();
                showSuccess('Categoria creata con successo!');
                
                return result.data;
            } catch (error) {
                console.error('❌ Error creating category:', error);
                showError(error.message);
                throw error;
            }
        }
        
        async function updateCategory(id, categoryData) {
            try {
                console.log('📂 Updating category:', id, categoryData);
                const response = await fetch(`/api/categories/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(categoryData)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to update category');
                }
                
                const result = await response.json();
                console.log('✅ Category updated:', result.data);
                
                closeModal();
                loadCategories();
                showSuccess('Categoria aggiornata con successo!');
                
                return result.data;
            } catch (error) {
                console.error('❌ Error updating category:', error);
                showError(error.message);
                throw error;
            }
        }
        
        async function deleteCategory(id) {
            if (!confirm('Sei sicuro di voler eliminare questa categoria?')) return;
            
            try {
                console.log('📂 Deleting category:', id);
                const response = await fetch(`/api/categories/${id}`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to delete category');
                }
                
                console.log('✅ Category deleted');
                loadCategories();
                showSuccess('Categoria eliminata con successo!');
            } catch (error) {
                console.error('❌ Error deleting category:', error);
                showError(error.message);
            }
        }
        
        // Render functions
        function renderCategories() {
            const tbody = document.getElementById('categoriesTableBody');
            
            if (categories.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="empty-state">
                            <h3>Nessuna categoria trovata</h3>
                            <p>Inizia creando la tua prima categoria</p>
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = categories.map(category => `
                <tr>
                    <td>
                        <strong>${category.name}</strong>
                    </td>
                    <td>
                        <span title="${category.description || ''}">${
                            category.description 
                                ? (category.description.length > 50 
                                    ? category.description.substring(0, 50) + '...' 
                                    : category.description)
                                : '-'
                        }</span>
                    </td>
                    <td>${category.shopify_product_type || '-'}</td>
                    <td>
                        <span class="status-badge">${category.fields?.length || 0} campi</span>
                    </td>
                    <td>
                        <span class="status-badge status-${category.status}">
                            ${category.status === 'active' ? 'Attiva' : 'Inattiva'}
                        </span>
                    </td>
                    <td>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn btn-outline btn-sm" onclick="editCategory(${category.id})">
                                ✏️ Modifica
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="deleteCategory(${category.id})">
                                🗑️ Elimina
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }
        
        function updatePagination() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const paginationInfo = document.getElementById('paginationInfo');
            
            prevBtn.disabled = currentPage <= 1;
            nextBtn.disabled = currentPage >= totalPages;
            
            paginationInfo.textContent = `Pagina ${currentPage} di ${totalPages}`;
        }
        
        // Modal functions
        function openCreateModal() {
            currentCategory = null;
            document.getElementById('modalTitle').textContent = 'Nuova Categoria';
            document.getElementById('submitBtn').textContent = 'Salva Categoria';
            document.getElementById('categoryForm').reset();
            document.getElementById('fieldsSection').style.display = 'none';
            document.getElementById('categoryModal').classList.add('show');
        }
        
        async function editCategory(id) {
            try {
                console.log('📂 Loading category for edit:', id);
                const response = await fetch(`/api/categories/${id}`);
                if (!response.ok) throw new Error('Failed to load category');
                
                const result = await response.json();
                currentCategory = result.data;
                
                document.getElementById('modalTitle').textContent = 'Modifica Categoria';
                document.getElementById('submitBtn').textContent = 'Aggiorna Categoria';
                
                // Fill form
                document.getElementById('categoryName').value = currentCategory.name;
                document.getElementById('categoryDescription').value = currentCategory.description || '';
                document.getElementById('shopifyProductType').value = currentCategory.shopify_product_type || '';
                document.getElementById('categoryStatus').value = currentCategory.status;
                
                // Show fields section if editing
                document.getElementById('fieldsSection').style.display = 'block';
                renderCategoryFields();
                
                document.getElementById('categoryModal').classList.add('show');
            } catch (error) {
                console.error('❌ Error loading category:', error);
                showError('Errore nel caricamento della categoria');
            }
        }
        
        function closeModal() {
            document.getElementById('categoryModal').classList.remove('show');
            currentCategory = null;
        }
        
        function renderCategoryFields() {
            const fieldsList = document.getElementById('fieldsList');
            const fields = currentCategory?.fields || [];
            
            if (fields.length === 0) {
                fieldsList.innerHTML = '<p style="color: #718096; font-style: italic;">Nessun campo personalizzato</p>';
                return;
            }
            
            fieldsList.innerHTML = fields.map(field => `
                <div class="field-item">
                    <div class="field-info">
                        <div class="field-name">${field.name}</div>
                        <div class="field-details">
                            Tipo: ${field.field_type} • 
                            ${field.required ? 'Obbligatorio' : 'Opzionale'} •
                            Posizione: ${field.position}
                        </div>
                    </div>
                    <div class="field-actions">
                        <button class="btn btn-outline btn-sm" onclick="editField(${field.id})">
                            ✏️
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteField(${field.id})">
                            🗑️
                        </button>
                    </div>
                </div>
            `).join('');
        }
        
        // Field modal functions
        function openFieldModal() {
            document.getElementById('fieldForm').reset();
            document.getElementById('optionsGroup').style.display = 'none';
            document.getElementById('fieldModal').classList.add('show');
        }
        
        function closeFieldModal() {
            document.getElementById('fieldModal').classList.remove('show');
        }
        
        function handleFieldTypeChange() {
            const fieldType = document.getElementById('fieldType').value;
            const optionsGroup = document.getElementById('optionsGroup');
            
            if (fieldType === 'select') {
                optionsGroup.style.display = 'block';
            } else {
                optionsGroup.style.display = 'none';
            }
        }
        
        async function handleFieldSubmit(event) {
            event.preventDefault();
            
            if (!currentCategory) {
                showError('Salva prima la categoria per aggiungere campi');
                return;
            }
            
            const formData = new FormData(event.target);
            const fieldData = {
                name: formData.get('name'),
                field_type: formData.get('field_type'),
                required: formData.has('required'),
                default_value: formData.get('default_value') || null
            };
            
            if (fieldData.field_type === 'select') {
                const optionsText = formData.get('options');
                fieldData.options = optionsText ? optionsText.split('\n').filter(opt => opt.trim()) : [];
            }
            
            try {
                const response = await fetch(`/api/categories/${currentCategory.id}/fields`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(fieldData)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to create field');
                }
                
                const result = await response.json();
                console.log('✅ Field created:', result.data);
                
                closeFieldModal();
                // Reload category to show new field
                await editCategory(currentCategory.id);
                showSuccess('Campo aggiunto con successo!');
                
            } catch (error) {
                console.error('❌ Error creating field:', error);
                showError(error.message);
            }
        }
        
        async function deleteField(fieldId) {
            if (!confirm('Sei sicuro di voler eliminare questo campo?')) return;
            
            try {
                const response = await fetch(`/api/categories/${currentCategory.id}/fields/${fieldId}`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to delete field');
                }
                
                console.log('✅ Field deleted');
                // Reload category to show updated fields
                await editCategory(currentCategory.id);
                showSuccess('Campo eliminato con successo!');
                
            } catch (error) {
                console.error('❌ Error deleting field:', error);
                showError(error.message);
            }
        }
        
        // Form submission
        async function handleSubmit(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const categoryData = {
                name: formData.get('name'),
                description: formData.get('description') || null,
                shopify_product_type: formData.get('shopify_product_type') || null,
                status: formData.get('status')
            };
            
            try {
                if (currentCategory) {
                    await updateCategory(currentCategory.id, categoryData);
                } else {
                    await createCategory(categoryData);
                }
            } catch (error) {
                // Error already handled in create/update functions
            }
        }
        
        // Search and filter functions
        function handleSearch() {
            searchTerm = document.getElementById('searchInput').value;
            currentPage = 1;
            loadCategories();
        }
        
        function handleFilter() {
            statusFilter = document.getElementById('statusFilter').value;
            currentPage = 1;
            loadCategories();
        }
        
        // Pagination functions
        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                loadCategories();
            }
        }
        
        function nextPage() {
            if (currentPage < totalPages) {
                currentPage++;
                loadCategories();
            }
        }
        
        // Notification functions
        function showSuccess(message) {
            showNotification(message, 'success');
        }
        
        function showError(message) {
            showNotification(message, 'error');
        }
        
        function showNotification(message, type) {
            // Remove existing notifications
            const existing = document.querySelector('.notification');
            if (existing) existing.remove();
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Hide notification after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('📂 Categories page ready');
            loadCategories();
        });
        
        // Close modals when clicking outside
        document.addEventListener('click', function(event) {
            if (event.target.classList.contains('modal')) {
                if (event.target.id === 'categoryModal') {
                    closeModal();
                } else if (event.target.id === 'fieldModal') {
                    closeFieldModal();
                }
            }
        });
    </script>
</body>
</html>